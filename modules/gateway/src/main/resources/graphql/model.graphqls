type Query {
    services(page: Int!, pageSize: Int!): ServicesPage!
    service(serviceId: ID!): Service!

    businesses(page: Int!, pageSize: Int!): BusinessesPage!
    myBusinesses(page: Int!, pageSize: Int!): BusinessesPage!
    businessesByOwner(owner: String!, page: Int!, pageSize: Int!): BusinessesPage!
    business(businessId: ID!): Business!

    staff(staffId: ID!): Staff!
    myInvitations(page: Int!, pageSize: Int!): StaffInvitationsPage!

    schedule(scheduleId: ID!): ManageableSchedule!
    reservationSlots(serviceIds: [ID!]!, from: LocalDate!, to: LocalDate!): [ReservationSlot!]!
    myReservations(from: LocalDate!, to: LocalDate!): [ReservationDetailed!]!
    reservationsToMe(from: LocalDate!, to: LocalDate!): [ReservationDetailed!]!
}

type Mutation {
    createBusiness(input: BusinessInput!): Business!
    changeBusinessDetails(businessId: Int!, input: BusinessDetailsInput!): Business!
    changeBusinessName(businessId: Int!, name: String!): Business!
    changeBusinessActiveness(businessId: Int!, active: Boolean!): Business!

    createService(input: ServiceInput!): Service!
    changeServiceDetails(serviceId: Int!, input: ServiceInput!): Service!
    changeServiceActiveness(serviceId: Int!, active: Boolean!): Service!

    inviteStaff(userSub: String!, businessId: Int!): StaffInvitation!
    acceptInvitation(invitationId: ID!): Staff!
    declineInvitation(invitationId: ID!): StaffInvitation!
    changeStaffDetails(staffId: Int!, input: StaffDetailsInput!): Staff!
    removeStaff(staffId: Int!): Staff!

    reserveSlot(dateTime: LocalDateTime!, staffId: ID!, serviceId: ID!): ReservationDetailed!
    cancelReservation(reservationId: ID!): ReservationDetailed!
    restoreReservation(reservationId: ID!): ReservationDetailed!

    createSchedule(serviceId: ID!, staffId: ID!, input: ScheduleInput!): ManageableSchedule!
}

interface Page {
    totalElements: Int!
    totalPages: Int!
}

type ServicesPage implements Page {
    totalElements: Int!
    totalPages: Int!
    content: [Service!]!
}

type BusinessesPage implements Page {
    totalElements: Int!
    totalPages: Int!
    content: [Business!]!
}

type StaffPage implements Page {
    totalElements: Int!
    totalPages: Int!
    content: [Staff!]!
}

type StaffInvitationsPage implements Page {
    totalElements: Int!
    totalPages: Int!
    content: [StaffInvitation!]!
}

type Business {
    id: ID!
    name: String!
    ownerSub: String!
    description: String
    services(page: Int!, pageSize: Int!): ServicesPage!
    myServices(page: Int!, pageSize: Int!): ServicesPage!
    staff(page: Int!, pageSize: Int!): StaffPage!
    staffInvitations(page: Int!, pageSize: Int!): StaffInvitationsPage!
}

input BusinessDetailsInput {
    description: String
}

input BusinessInput {
    name: String!
    description: String
}

type Service {
    id: ID!
    name: String!
    description: String
    active: Boolean!
    business: Business!
    schedule(from: LocalDate!, to: LocalDate!): [ReservationSlot!]!
    scheduleOfStaff(staffId: ID!, from: LocalDate!, to: LocalDate!): [ReservationSlot!]!
}

input ServiceDetailsInput {
    name: String!
    description: String
}

input ServiceInput {
    businessId: ID!
    name: String!
    description: String
}

type Staff {
    id: ID!
    sub: String!
    name: String!
    description: String
    business: Business!
    active: Boolean!
    invitations: [StaffInvitation!]!
    schedule(serviceId: ID!, from: LocalDate!, to: LocalDate!): [ReservationSlot!]!
    activeSchedules(serviceId: ID!): [ManageableSchedule!]!
}

input StaffDetailsInput {
    description: String
}

input ScheduleInput {
    start: LocalDate
    end: LocalDate
    patterns: [PatternInput!]!
}

type StaffInvitation {
    id: ID!
    sub: String!
    business: Business!
    createdAt: LocalDateTime!
    status: StaffInvitationStatus!
}

type ManageableSchedule {
    id: ID!
    start: LocalDate!
    end: LocalDate!
    staff: Staff!
    service: Service!
    patterns: [SchedulePattern!]!
    createdAt: LocalDateTime!
}

input ReservationSlotInput {
    start: LocalTime!
    end: LocalTime!
    cost: Float!
    maxReservations: Int!
}

type ReservationSlot {
    date: LocalDate!
    start: LocalTime!
    end: LocalTime!
    cost: Float!
    reservationsLeft: Int!
    maxReservations: Int!
    service: Service!
    staff: Staff!
    reservations: [Reservation!]!
    reservationsDetailed: [ReservationDetailed!]!
}

type ReservationDetailed {
    id: Int!
    service: Service!
    staff: Staff!
    start: LocalTime!
    end: LocalTime!
    date: LocalDate!
    active: Boolean!
    cost: Float!
    clientSub: String!
    createdAt: LocalDateTime!
}

type Reservation {
    id: Int!
    service: Service!
    staff: Staff!
    start: LocalTime!
    end: LocalTime!
    date: LocalDate!
    cost: Float!
    active: Boolean!
    createdAt: LocalDateTime!
}

input PatternInput {
    repeatDays: Int!
    pauseDays: Int!
    slots: [ReservationSlotInput!]!
}

type SchedulePattern {
    id: ID!
    repeatDays: Int!
    pauseDays: Int!
    slots: [ReservationSlot!]!
}

enum StaffInvitationStatus {
    ACCEPTED
    DECLINED
    WAITING
}
scalar LocalDate
scalar LocalTime
scalar LocalDateTime